name: Deploy Backend MIRÃ“

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.11.1'

    - name: Install dependencies
      run: npm install

    - name: Install OpenConnect
      run: sudo apt-get install -y openconnect

    - name: Install sshpass
      run: sudo apt-get install -y sshpass

    - name: Connect to VPN
      run: |
        echo "${{ secrets.VPN_PASSWORD }}" | sudo openconnect --protocol=gp --user=${{ secrets.VPN_USER }} --passwd-on-stdin ${{ secrets.VPN_HOST }} -b
      env:
        VPN_PASSWORD: ${{ secrets.VPN_PASSWORD }}
        VPN_USER: ${{ secrets.VPN_USER }}
        VPN_HOST: ${{ secrets.VPN_HOST }}

    - name: Verify VPN connection
      run: ip a

    - name: List network routes
      run: ip route

    - name: Test internal connectivity with SSH
      run: |
        sshpass -p "${{ secrets.INTERNAL_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.INTERNAL_USER }}@${{ secrets.INTERNAL_RESOURCE_IP }} 'echo "SSH connection successful"'

    - name: Run Semantic Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npx semantic-release

    - name: Update Repository on Remote Server
      run: |
        sshpass -p "${{ secrets.INTERNAL_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.INTERNAL_USER }}@${{ secrets.INTERNAL_RESOURCE_IP }} '
          cd ~/MIRO/Back_Miro;
          git pull;
          npm install;
          exit;'

    - name: Restart PM2 with new version
      run: |
        sshpass -p "${{ secrets.INTERNAL_SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.INTERNAL_USER }}@${{ secrets.INTERNAL_RESOURCE_IP }} '
          cd ~/MIRO/Back_Miro;
          pm2 stop all;
          pm2 startOrRestart ecosystem.config.js --env production;
          exit;'

    - name: Post Checkout repository
      run: echo "Deployment complete"
